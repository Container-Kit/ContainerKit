# Container Kit CLI - LLM Context File

## Overview

This is the Go CLI tool for Container Kit, built with Cobra (commands) and Bubble Tea (TUI). It provides beautiful terminal interfaces for building Tauri applications, managing Apple container configurations, database migrations, and development workflow automation for macOS container management.

## Architecture

### Core Technologies
- **Go 1.21+**: Main implementation language
- **Cobra**: CLI command structure and argument parsing
- **Bubble Tea**: Terminal User Interface (TUI) framework
- **Lipgloss**: Styling and layout for terminal UIs
- **Spinner & Progress**: Real-time feedback components

### Design Philosophy
- **Verbose by default**: All commands show detailed output unless `--verbose=false`
- **Non-fullscreen TUI**: Designed for IDE terminal integration (no `tea.WithAltScreen()`)
- **Beautiful interfaces**: Rich colors, emojis, and smooth animations
- **Interactive and non-interactive modes**: Support both CLI automation and interactive UIs

## Project Structure

```
cli/
├── main.go                    # Entry point and version info
├── cmd/                       # CLI commands
│   ├── root.go               # Root command and global flags
│   ├── build.go              # Tauri build commands
│   ├── dev.go                # Development workflow commands
│   ├── migration.go          # Database migration management
│   └── *.go                  # Other command modules
├── internal/
│   └── tui/                  # Terminal UI components
│       ├── model.go          # Build & Dev TUI models
│       ├── migration.go      # Migration TUI models
│       ├── styles.go         # Lipgloss styling definitions
│       └── commands.go       # TUI command helpers
├── go.mod                    # Go module definition
├── go.sum                    # Dependency checksums
└── README.md                 # CLI documentation
```

## Command Structure

### Root Command
- **Binary name**: `container-kit-cli`
- **Global flags**: `--verbose` (default: true), `--no-color`, `--help`
- **Subcommands**: `build`, `dev`, `migration`, `help`

### Build Command (`build`)
**Purpose**: Build and sign Tauri applications with interactive TUI

**Features**:
- Target selection (universal, aarch64-apple-darwin, x86_64-apple-darwin)
- Build mode (release, debug)
- Interactive configuration with beautiful TUI
- Real-time build progress with spinner and progress bar
- Automatic code signing for macOS
- DMG and App bundle generation

**Usage**:
```bash
# Interactive build (recommended)
container-kit-cli build --interactive

# Direct build
container-kit-cli build --target universal --mode release

# CI/CD build
container-kit-cli build --non-interactive --verbose --no-color
```

### Development Command (`dev`)
**Purpose**: Development environment management and workflow automation

**Subcommands**:
- `dev start` - Start development servers
- `dev setup` - Setup development environment
- `dev status` - Check development environment status
- `dev clean` - Clean development artifacts
- `dev reset` - Reset development environment

**Features**:
- Environment validation (Node.js, pnpm, Rust, Tauri CLI)
- Project structure verification
- Development server management
- Artifact cleanup
- Interactive and non-interactive modes

### Migration Command (`migration`)
**Purpose**: Database migration management for Apple container configurations with SQL to Rust generation

**Subcommands**:
- `migration generate` - Generate Rust migration files from SQL for container configs
- `migration list` - List all available container configuration migrations
- `migration validate` - Validate migration files and container schema structure
- `migration status` - Check migration system status for container database

**Features**:
- Scans `src-tauri/migrations/*.sql` files for container configuration schemas
- Extracts version numbers from filenames (e.g., `0001_container_policies.sql`)
- Generates `generated_migrations.rs` with Rust bindings for Apple container integration
- Perfect parity with TypeScript implementation
- Interactive TUI for complex container configuration operations

## TUI Architecture

### Model Structure
Each TUI component follows the Bubble Tea pattern:

```go
type Model struct {
    config     *Config       // Command configuration
    state      State         // Current UI state
    spinner    spinner.Model // Loading animation
    progress   progress.Model // Progress bar
    // ... other UI state
}

func (m *Model) Init() tea.Cmd { /* Initialize */ }
func (m *Model) Update(tea.Msg) (tea.Model, tea.Cmd) { /* Handle events */ }
func (m *Model) View() string { /* Render UI */ }
```

### State Management
- **Welcome State**: Initial greeting and overview
- **Configuration State**: Show/confirm settings
- **Processing State**: Active operation with progress
- **Success State**: Completion with results
- **Error State**: Error handling with troubleshooting
- **Aborted State**: User cancellation

### Message Types
```go
// Custom messages for each operation
type buildStartMsg struct{}
type buildProgressMsg int
type buildCompleteMsg struct{}
type buildErrorMsg struct{ error }
```

## Styling System

### Color Palette
```go
primaryColor   = "#00D9FF"  // Bright cyan
secondaryColor = "#FF6B9D"  // Pink
accentColor    = "#C6FF00"  // Lime green
successColor   = "#00FF88"  // Green
errorColor     = "#FF4757"  // Red
warningColor   = "#FFA502"  // Orange
```

### Style Components
- **titleStyle**: Large, colored headers
- **configBoxStyle**: Bordered configuration display
- **successBoxStyle**: Success message containers
- **errorBoxStyle**: Error message containers
- **spinnerStyle**: Loading animation styling
- **progressStyle**: Progress bar styling

### Layout Principles
- **Left-aligned content**: No fullscreen centering for IDE compatibility
- **Compact spacing**: Minimal empty lines between elements
- **Consistent borders**: Rounded borders for containers
- **Rich colors**: Extensive use of color for visual hierarchy

## Migration System

### File Processing Flow
1. **Scan Directory**: Read `src-tauri/migrations/*.sql` files
2. **Extract Versions**: Parse filename format `NNNN_description.sql`
3. **Sort by Version**: Ensure proper migration order
4. **Generate Rust**: Create `generated_migrations.rs` with bindings

### Generated Output Format
```rust
use tauri_plugin_sql::{Migration, MigrationKind};

pub fn load_migrations() -> Vec<Migration> {
    vec![
        Migration {
            version: 1,
            description: "0001_container_configs.sql",
            sql: include_str!("0001_container_configs.sql"),
            kind: MigrationKind::Up
        },
        // ... more container configuration migrations
    ]
}
```

### TypeScript Parity
The Go implementation produces **identical output** to the TypeScript version:
- Same file scanning logic
- Same version extraction algorithm
- Same Rust code generation format
- Same verbose output formatting

## Build System Integration

### pnpm Scripts
The CLI integrates with the main project via pnpm scripts:

```json
{
  "build:cli": "cd cli && go build -o ../bin/container-kit-cli .",
  "cli": "./bin/container-kit-cli",
  "cli:interactive": "pnpm build:cli && pnpm cli build --interactive",
  "migration:generate": "pnpm build:cli && pnpm cli migration generate"
}
```

### Tauri Build Integration
- **Frontend Build**: Runs `pnpm build` for Svelte compilation with Apple container UI components
- **Rust Compilation**: Compiles Tauri backend with cargo, including Apple framework integrations
- **Code Signing**: Automatic Apple code signing and notarization with Apple Developer certificates
- **Bundle Generation**: Creates native `.app` and `.dmg` files for macOS distribution
- **Progress Tracking**: Real-time feedback during long operations with Apple-styled progress indicators

## Configuration

### Project Validation
The CLI validates it's running in a valid Tauri project:
- Checks for `src-tauri/` directory
- Verifies `src-tauri/tauri.conf.json` exists
- Validates `src-tauri/Cargo.toml` presence

### Environment Requirements
- **Go 1.21+**: For CLI compilation with Apple Silicon support
- **pnpm**: Package manager (not npm)
- **Node.js**: For frontend compilation
- **Rust/Cargo**: For Tauri backend with Apple framework bindings
- **Tauri CLI**: For Tauri-specific operations and Apple container integration
- **Xcode Command Line Tools**: For Apple framework compilation
- **Apple Developer Account**: For code signing and notarization

## Error Handling

### User-Friendly Messages
- Clear error descriptions with context
- Troubleshooting suggestions for common issues
- Helpful hints for environment setup
- Links to documentation when relevant

### Graceful Degradation
- Falls back to non-interactive mode on TUI failures
- Continues operation when possible
- Provides alternative solutions for problems
- Maintains verbose logging for debugging

## Development Patterns

### Adding New Commands
1. Create command file in `cmd/` directory
2. Define Cobra command with flags and help text
3. Add to root command in `init()` function
4. Implement non-interactive function
5. Add TUI model if interactive mode needed
6. Update main project's pnpm scripts

### TUI Development
1. Define state enum and model struct
2. Implement Init(), Update(), View() methods
3. Create message types for state transitions
4. Add styling with Lipgloss
5. Handle keyboard input and cancellation
6. Test both interactive and non-interactive modes

### Testing Commands
```bash
# Build CLI
cd cli && go build -o ../bin/container-kit-cli .

# Test from project root
./bin/container-kit-cli --help
./bin/container-kit-cli build --help
./bin/container-kit-cli migration generate --verbose
```

## Common Patterns

### Configuration Structs
```go
type BuildConfig struct {
    Target         string
    Mode           string
    Verbose        bool
    NonInteractive bool
    ProjectRoot    string
}
```

### TUI Message Handling
```go
func (m *Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {
    case tea.KeyMsg:
        switch msg.String() {
        case "ctrl+c", "q":
            return m, tea.Quit
        case "enter":
            return m, m.startOperation()
        }
    case operationCompleteMsg:
        m.state = StateSuccess
        return m, nil
    }
    return m, nil
}
```

### Progress Updates
```go
func (m *Model) executeOperation() tea.Cmd {
    return tea.Tick(time.Millisecond*100, func(time.Time) tea.Msg {
        m.step++
        if m.step >= m.totalSteps {
            return operationCompleteMsg{}
        }
        return progressMsg(m.step)
    })
}
```

## Current Implementation Status

### Completed Features
- ✅ Complete Cobra command structure
- ✅ Bubble Tea TUI for all major operations
- ✅ Migration generation with TypeScript parity
- ✅ Tauri build system integration
- ✅ Development workflow management
- ✅ Non-fullscreen TUI design
- ✅ Verbose-by-default configuration
- ✅ Rich error handling and user feedback

### Design Decisions
- **No fullscreen mode**: Better IDE integration
- **Verbose by default**: Developer-friendly output
- **Left-aligned layouts**: Consistent with terminal conventions
- **Rich colors and emojis**: Modern, approachable interface
- **State-based TUI**: Clear progression through operations

This CLI tool provides a professional, beautiful, and highly functional interface for Container Kit development workflows focused on Apple container management, with special attention to developer experience, IDE integration, and macOS native development patterns.
